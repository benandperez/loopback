{
	"info": {
		"_postman_id": "aedbaa05-b947-43d7-9ac6-e983781de2a7",
		"name": "Administration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"realm\": \"Benjamin1\",\r\n  \"username\": \"benja1min1\",\r\n  \"email\": \"benjaa@hot.com\",\r\n  \"emailVerified\": true,\r\n  \"verificationToken\": \"123\",\r\n  \"password\": \"1234567890\",\r\n  \"additionalProp1\": {}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/signup",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Construir una solicitud post para el token STG\r",
							"const TokenRequest = {\r",
							"url: 'http://localhost:3000/users/login',\r",
							"header: 'Content-Type: application/json',\r",
							"method: \"POST\",\r",
							"body: {\r",
							"mode: 'raw',\r",
							"raw: JSON.stringify(\r",
							"    { \r",
							"        email: pm.environment.get(\"email\"), \r",
							"        password: pm.environment.get(\"password\") \r",
							"    }\r",
							")\r",
							"}\r",
							"};\r",
							"// enviar solicitud y capturar el token generado en la variable de entorno\r",
							"pm.sendRequest(TokenRequest, function (err, res) {\r",
							"if(err) {\r",
							"console.log(err);\r",
							"} else {\r",
							"postman.setEnvironmentVariable(\"token\", res.json().token);\r",
							"}\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Gorra\",\r\n  \"description\": \"Gorra\",\r\n  \"quantity\": 10,\r\n  \"price\": 20,\r\n  \"companyId\": {  \r\n    \"id\":\"62c368fd2a8c7806d8fbd018\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All product by company",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Construir una solicitud post para el token STG\r",
							"const TokenRequest = {\r",
							"url: 'http://localhost:3000/users/login',\r",
							"header: 'Content-Type: application/json',\r",
							"method: \"POST\",\r",
							"body: {\r",
							"mode: 'raw',\r",
							"raw: JSON.stringify(\r",
							"    { \r",
							"        email: pm.environment.get(\"email\"), \r",
							"        password: pm.environment.get(\"password\") \r",
							"    }\r",
							")\r",
							"}\r",
							"};\r",
							"// enviar solicitud y capturar el token generado en la variable de entorno\r",
							"pm.sendRequest(TokenRequest, function (err, res) {\r",
							"if(err) {\r",
							"console.log(err);\r",
							"} else {\r",
							"postman.setEnvironmentVariable(\"token\", res.json().token);\r",
							"}\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/products?filter=%7B%0A%20%20%22offset%22%3A%200%2C%0A%20%20%22limit%22%3A%20100%2C%0A%20%20%22skip%22%3A%200%2C%0A%20%20%22order%22%3A%20%22string%22%2C%0A%20%20%22where%22%3A%20%7B%0A%20%20%20%20%22companyId.id%22%3A%20%2262c368fd2a8c7806d8fbd018%22%0A%20%20%7D%2C%0A%20%20%22fields%22%3A%20%7B%0A%20%20%20%20%22id%22%3A%20true%2C%0A%20%20%20%20%22name%22%3A%20true%2C%0A%20%20%20%20%22description%22%3A%20true%2C%0A%20%20%20%20%22quantity%22%3A%20true%2C%0A%20%20%20%20%22price%22%3A%20true%2C%0A%20%20%20%20%22companyId%22%3A%20true%0A%20%20%7D%0A%7D",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					],
					"query": [
						{
							"key": "filter",
							"value": "%7B%0A%20%20%22offset%22%3A%200%2C%0A%20%20%22limit%22%3A%20100%2C%0A%20%20%22skip%22%3A%200%2C%0A%20%20%22order%22%3A%20%22string%22%2C%0A%20%20%22where%22%3A%20%7B%0A%20%20%20%20%22companyId.id%22%3A%20%2262c368fd2a8c7806d8fbd018%22%0A%20%20%7D%2C%0A%20%20%22fields%22%3A%20%7B%0A%20%20%20%20%22id%22%3A%20true%2C%0A%20%20%20%20%22name%22%3A%20true%2C%0A%20%20%20%20%22description%22%3A%20true%2C%0A%20%20%20%20%22quantity%22%3A%20true%2C%0A%20%20%20%20%22price%22%3A%20true%2C%0A%20%20%20%20%22companyId%22%3A%20true%0A%20%20%7D%0A%7D"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Construir una solicitud post para el token STG\r",
							"const TokenRequest = {\r",
							"url: 'http://localhost:3000/users/login',\r",
							"header: 'Content-Type: application/json',\r",
							"method: \"POST\",\r",
							"body: {\r",
							"mode: 'raw',\r",
							"raw: JSON.stringify(\r",
							"    { \r",
							"        email: pm.environment.get(\"email\"), \r",
							"        password: pm.environment.get(\"password\") \r",
							"    }\r",
							")\r",
							"}\r",
							"};\r",
							"// enviar solicitud y capturar el token generado en la variable de entorno\r",
							"pm.sendRequest(TokenRequest, function (err, res) {\r",
							"if(err) {\r",
							"console.log(err);\r",
							"} else {\r",
							"postman.setEnvironmentVariable(\"token\", res.json().token);\r",
							"}\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/products/:id",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/products/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "62c366992a8c7806d8fbd017"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update product",
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/products/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "62c369382a8c7806d8fbd01a"
						}
					]
				}
			},
			"response": []
		}
	]
}